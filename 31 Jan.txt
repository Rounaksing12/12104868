1) #include <iostream>
#include <unordered_set>
#include <vector>

bool hasDuplicates(const std::vector<int>& nums) 
{
    std::unordered_set<int> seen;
    for (int num : nums) 
    {
        if (seen.find(num) != seen.end()) 
        {
            return true;
        }
        seen.insert(num);
    }
    return false;
}

int main() 
{
    std::vector<int> input1 = {1, 2, 1, 3, 1};
    bool output1 = hasDuplicates(input1);
    std::cout << std::boolalpha << output1 << std::endl;
    std::vector<int> input2 = {1, 2, 3, 4, 5};
    bool output2 = hasDuplicates(input2);
    std::cout << std::boolalpha << output2 << std::endl;
    return 0;
}

2) #include <iostream>
#include <vector>
#include <unordered_set>

int findFirstDuplicate(const std::vector<int>& nums)
{
    std::unordered_set<int> seen;
    for (int num : nums) 
    {
        if (seen.find(num) != seen.end()) 
        {
            return num;
        }
        seen.insert(num);
     }
    return -1;
 }

int main()
{
  std::vector<int> input1 = {1, 2, 1, 3, 1};
  int output1 = findFirstDuplicate(input1);
  std::cout << output1 << std::endl;
  std::vector<int> input2 = {1, 2, 3, 4, 2};
  int output2 = findFirstDuplicate(input2);
  std::cout << output2 << std::endl;
  return 0;
}

 
ï¿¼